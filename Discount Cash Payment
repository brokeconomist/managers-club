import streamlit as st
import numpy as np
import plotly.graph_objects as go

# --------- Σταθερές από Excel -----------
current_sales = 1000
extra_sales = 250
cost_pct = 0.80
wacc = 0.20
cash_discount_accept_pct = 0.50
cash_discount_days = 10
non_discount_accept_days = 120
cash_discount_accept_days = 60
current_collection_period = 90

# --------- Υπολογισμός NPV ανά ποσοστό έκπτωσης -----------
def calculate_npv(discount_pct):
    new_avg_collection = (cash_discount_accept_pct * cash_discount_days +
                          (1 - cash_discount_accept_pct) * non_discount_accept_days)
    new_receivables = (current_sales * (1 - discount_pct) * new_avg_collection) / 365
    old_receivables = (current_sales * current_collection_period) / 365
    capital_release = old_receivables - new_receivables
    extra_profit = extra_sales * (1 - cost_pct)
    release_profit = capital_release * wacc
    discount_cost = current_sales * discount_pct * cash_discount_accept_pct
    npv = extra_profit + release_profit - discount_cost
    return npv

# --------- Υπολογισμοί για γραφικό -----------
discount_rates = np.arange(0.0, 0.11, 0.01)
npvs = [calculate_npv(d) for d in discount_rates]

max_npv = max(npvs)
max_index = npvs.index(max_npv)
optimal_discount = discount_rates[max_index]

break_even_discount = None
for i in range(1, len(npvs)):
    if npvs[i-1] > 0 and npvs[i] < 0:
        break_even_discount = discount_rates[i-1] + 0.01
        break

# --------- Streamlit UI -----------
st.subheader("📈 Διάγραμμα NPV σε σχέση με την Έκπτωση")

fig = go.Figure()
fig.add_trace(go.Scatter(
    x=discount_rates * 100,
    y=npvs,
    mode='lines+markers',
    name='NPV',
    line=dict(color='royalblue')
))

fig.add_vline(x=optimal_discount * 100, line=dict(color='green', dash='dash'),
              annotation_text=f"Βέλτιστη: {optimal_discount*100:.2f}%", annotation_position="top left")

if break_even_discount:
    fig.add_vline(x=break_even_discount * 100, line=dict(color='red', dash='dash'),
                  annotation_text=f"Break-even: {break_even_discount*100:.2f}%", annotation_position="top right")

fig.update_layout(
    xaxis_title='Ποσοστό Έκπτωσης (%)',
    yaxis_title='Καθαρή Παρούσα Αξία (NPV)',
    title='NPV vs Ποσοστό Έκπτωσης για πληρωμή τοις μετρητοίς',
    hovermode='x unified',
    template='simple_white'
)

st.plotly_chart(fig, use_container_width=True)

st.markdown("""
- ✅ Η **πράσινη διακεκομμένη γραμμή** δείχνει τη βέλτιστη έκπτωση που μεγιστοποιεί το NPV.
- ❌ Η **κόκκινη γραμμή** δείχνει το break-even σημείο (όπου το NPV = 0).
- 📉 Πέρα από το βέλτιστο σημείο, το κόστος της έκπτωσης αρχίζει να υπερκαλύπτει τα οφέλη.
""")
